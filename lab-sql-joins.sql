-- LAB | SQL Joins
-- Challenge - Joining on multiple tables
-- Write SQL queries to perform the following tasks using the Sakila database:

-- 1 List the number of films per category.
USE sakila;
SELECT* FROM sakila.category;
SELECT* FROM sakila.film_category;

SELECT c.name AS category, COUNT(fc.film_id) AS number_of_films
FROM sakila.film_category AS fc
JOIN sakila.category AS c 
ON fc.category_id = c.category_id
GROUP BY c.name;

-- 2 Retrieve the store ID, city, and country for each store.
SELECT* FROM sakila.store;
SELECT* FROM sakila.city;
SELECT* FROM sakila.country;
SELECT* FROM sakila.address;

SELECT st.store_id, ci.city, co.country
FROM sakila.store AS st
INNER JOIN sakila.address AS ad 
ON st.address_id = ad.address_id
INNER JOIN sakila.city AS ci 
ON ad.city_id = ci.city_id
INNER JOIN sakila.country AS co 
ON ci.country_id = co.country_id;

-- 3 Calculate the total revenue generated by each store in dollars.
SELECT* FROM sakila.store;
SELECT* FROM sakila.staff;
SELECT* FROM sakila.Payment;

SELECT DISTINCT store_id, SUM(amount)
FROM store s
JOIN inventory as i USING (store_id)
JOIN rental as r USING(inventory_id)
JOIN payment as p USING(rental_id)
GROUP BY store_id;

-- 4 Determine the average running time of films for each category.
SELECT* FROM sakila.film;
SELECT* FROM sakila.film_category;

SELECT c.name AS category, AVG(f.length) AS average_running_time_of_films
FROM sakila.film AS f
JOIN sakila.film_category AS fc USING (film_id)
JOIN sakila.category AS c USING (category_id)
GROUP BY c.name;

-- BONUS QUESTIONS

-- 5. Identify the film categories with the longest average running time.
SELECT c.name AS category, AVG(f.length) AS average_running_time_of_films
FROM sakila.film AS f
JOIN sakila.film_category AS fc USING (film_id)
JOIN sakila.category AS c USING (category_id)
GROUP BY c.name
ORDER BY average_running_time_of_films DESC
LIMIT 5;

-- 6 Display the top 10 most frequently rented movies in descending order.
SELECT f.title AS movie_title, COUNT(r.rental_id) AS rental_count
FROM sakila.film AS f
JOIN sakila.inventory AS i 
ON f.film_id = i.film_id
JOIN sakila.rental AS r 
ON i.inventory_id = r.inventory_id
GROUP BY f.title
ORDER BY rental_count DESC
LIMIT 10;

-- 7 Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT * FROM rental;
SELECT * FROM inventory;
SELECT * FROM store;
SELECT * FROM film;

SELECT store_id, (IF(title = 'ACADEMY DINOSAUR', "Yes", "No")) as available
FROM inventory i 
JOIN film f USING(film_id)
WHERE f.title='ACADEMY DINOSAUR' and store_id = 1
GROUP by store_id;

-- 8 Provide a list of all distinct film titles, along with their availability status in the inventory. 
-- Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, and this information can be 
-- obtained using a CASE statement combined with IFNULL."

SELECT DISTINCT f.title AS film_title,
CASE
WHEN IFNULL(i.inventory_id, 0) = 0 THEN 'NOT available'
ELSE 'Available'
END AS availability_status
FROM sakila.film AS f
LEFT JOIN sakila.inventory AS i
ON f.film_id = i.film_id;